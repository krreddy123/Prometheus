# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]

# Configuration for telegraf agent
[agent]
    ## Default data collection interval for all inputs
    interval = "10s"
    ## Rounds collection interval to 'interval'
    ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
    round_interval = true

    ## Telegraf will send metrics to outputs in batches of at most
    ## metric_batch_size metrics.
    ## This controls the size of writes that Telegraf sends to output plugins.
    metric_batch_size = 1000

    ## Maximum number of unwritten metrics per output.  Increasing this value
    ## allows for longer periods of output downtime without dropping metrics at the
    ## cost of higher maximum memory usage.
    metric_buffer_limit = 10000

    ## Collection jitter is used to jitter the collection by a random amount.
    ## Each plugin will sleep for a random time within jitter before collecting.
    ## This can be used to avoid many plugins querying things like sysfs at the
    ## same time, which can have a measurable effect on the system.
    collection_jitter = "0s"

    ## Collection offset is used to shift the collection by the given amount.
    ## This can be be used to avoid many plugins querying constraint devices
    ## at the same time by manually scheduling them in time.
    # collection_offset = "0s"

    ## Default flushing interval for all outputs. You shouldn't set this below
    ## interval. Maximum flush_interval will be flush_interval + flush_jitter
    flush_interval = "10s"
    ## Jitter the flush interval by a random amount. This is primarily to avoid
    ## large write spikes for users running a large number of telegraf instances.
    ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
    flush_jitter = "0s"

    ## Collected metrics are rounded to the precision specified. Precision is
    ## specified as an interval with an integer + unit (e.g. 0s, 10ms, 2us, 4s).
    ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
    ##
    ## By default or when set to "0s", precision will be set to the same
    ## timestamp order as the collection interval, with the maximum being 1s:
    ##   ie, when interval = "10s", precision will be "1s"
    ##       when interval = "250ms", precision will be "1ms"
    ##
    ## Precision will NOT be used for service inputs. It is up to each individual
    ## service input to set the timestamp at the appropriate precision.
    precision = "0s"

    ## Logging configuration:
    ## Log at debug level.
    debug = false
    ## Log only error level messages.
    quiet = false

    ## Log target controls the destination for logs and can be one of "file",
    ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
    ## is determined by the "logfile" setting.
    # logtarget = "file"

    ## Name of the file to be logged to when using the "file" logtarget.  If set to
    ## the empty string then logs are written to stderr.
    logfile = "C:/tools/telegraf/telegraf.log"

    ## The logfile will be rotated after the time interval specified.  When set
    ## to 0 no time based rotation is performed.  Logs are rotated only when
    ## written to, if there is no log activity rotation may be delayed.
    # logfile_rotation_interval = "0d"

    ## The logfile will be rotated when it becomes larger than the specified
    ## size.  When set to 0 no size based rotation is performed.
    # logfile_rotation_max_size = "0MB"

    ## Maximum number of rotated archives to keep, any older logs are deleted.
    ## If set to -1, no archives are removed.
    # logfile_rotation_max_archives = 5

    ## Pick a timezone to use when logging or type 'local' for local time.
    ## Example: America/Chicago
    # log_with_timezone = ""

    ## Override default hostname, if empty use os.Hostname()
    hostname = ""
    ## If set to true, do no set the "host" tag in the telegraf agent.
    omit_hostname = false

    ## Method of translating SNMP objects. Can be "netsnmp" which
    ## translates by calling external programs snmptranslate and snmptable,
    ## or "gosmi" which translates using the built-in gosmi library.
    # snmp_translator = "netsnmp"

###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Publish all metrics to /metrics for Prometheus to scrape
[[outputs.prometheus_client]]
    ## Address to listen on.
    listen = "0.0.0.0:9273"

    ## Metric version controls the mapping from Telegraf metrics into
    ## Prometheus format.  When using the prometheus input, use the same value in
    ## both plugins to ensure metrics are round-tripped without modification.
    ##
    ##   example: metric_version = 1;
    ##            metric_version = 2; recommended version
    # metric_version = 1

    ## Use HTTP Basic Authentication.
    # basic_username = "Foo"
    # basic_password = "Bar"

    ## If set, the IP Ranges which are allowed to access metrics.
    ##   ex: ip_range = ["192.168.0.0/24", "192.168.1.0/30"]
    # ip_range = []

    ## Path to publish the metrics on.
    path = "/metrics"

    ## Expiration interval for each metric. 0 == no expiration
    # expiration_interval = "60s"

    ## Collectors to enable, valid entries are "gocollector" and "process".
    ## If unset, both are enabled. ["gocollector", "process"]
    collectors_exclude = ["gocollector", "process"]

    ## Send string metrics as Prometheus labels.
    ## Unless set to false all string metrics will be sent as labels.
    # string_as_label = true

    ## If set, enable TLS with the given certificate.
    # tls_cert = "/etc/ssl/telegraf.crt"
    # tls_key = "/etc/ssl/telegraf.key"

    ## Set one or more allowed client CA certificate file names to
    ## enable mutually authenticated TLS connections
    # tls_allowed_cacerts = ["/etc/telegraf/clientca.pem"]

    ## Export metric collection time.
    # export_timestamp = false

###############################################################################
#                                  INPUTS                                     #
###############################################################################
# https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        # Processor usage, alternative to native, reports on a per core.
        ObjectName = "Processor"
        Instances = ["*"]
        Counters = [
                    "% Idle Time",
                    "% Interrupt Time",
                    "% Privileged Time",
                    "% User Time",
                    "% Processor Time",
                    "% DPC Time"
                ]
        Measurement = "win_cpu"
        IncludeTotal = true #Set to true to include _Total instance when querying for all (*).

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        # Disk times and queues
        ObjectName = "LogicalDisk"
        Instances = ["*"]
        Counters = [
                    "% Idle Time",
                    "% Disk Time",
                    "% Disk Read Time",
                    "% Disk Write Time",
                    "% User Time",
                    "% Free Space",
                    "Current Disk Queue Length",
                    "Free Megabytes"
                ]
        Measurement = "win_disk"

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        ObjectName = "PhysicalDisk"
        Instances = ["*"]
        Counters = [
                    "Disk Read Bytes/sec",
                    "Disk Write Bytes/sec",
                    "Current Disk Queue Length",
                    "Disk Reads/sec",
                    "Disk Writes/sec",
                    "% Disk Time",
                    "% Disk Read Time",
                    "% Disk Write Time"
                ]
        Measurement = "win_diskio"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # more counters for the Network Interface Object can be found at
#         # https://msdn.microsoft.com/en-us/library/ms803962.aspx
#         ObjectName = "Network Interface"
#         Instances = ["*"] # Use 6 x - to remove the Instance bit from the query.
#         Counters = [
#                     "Bytes Received/sec",
#                     "Bytes Sent/sec",
#                     "Packets Received/sec",
#                     "Packets Sent/sec",
#                     "Packets Received Discarded",
#                     "Packets Outbound Discarded",
#                     "Packets Received Errors",
#                     "Packets Outbound Errors"
#                 ]
#         Measurement = "win_net"

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        ObjectName = "System"
        Counters = [
                    "Context Switches/sec",
                    "System Calls/sec",
                    "Processor Queue Length",
                    "System Up Time"
                ]
        Instances = ["------"]
        Measurement = "win_system"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # Example query where the Instance portion must be removed to get data back, such as from the Memory object.
#         ObjectName = "Memory"
#         Counters = [
#                     "Available Bytes",
#                     "Cache Faults/sec",
#                     "Demand Zero Faults/sec",
#                     "Page Faults/sec",
#                     "Pages/sec",
#                     "Transition Faults/sec",
#                     "Pool Nonpaged Bytes",
#                     "Pool Paged Bytes",
#                     "Standby Cache Reserve Bytes",
#                     "Standby Cache Normal Priority Bytes",
#                     "Standby Cache Core Bytes"
#                 ]
#         Instances = ["------"] # Use 6 x - to remove the Instance bit from the query.
#         Measurement = "win_mem"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # .NET CLR Memory, in this case for IIS only
#         ObjectName = ".NET CLR Memory"
#         Counters = ["% Time in GC","# Bytes in all Heaps","# Gen 0 Collections","# Gen 1 Collections","# Gen 2 Collections","# Induced GC","Allocated Bytes/sec","Finalization Survivors","Gen 0 heap size","Gen 1 heap size","Gen 2 heap size","Large Object Heap size","# of Pinned Objects"]    
#         Instances = ["w3wp"]
#         Measurement = "win_dotnet_mem"
#         # IncludeTotal = false #Set to true to include _Total instance when querying for all (*).

# [[inputs.win_perf_counters]]
#   [[inputs.win_perf_counters.object]]
#     # HTTP Service request queues in the Kernel before being handed over to User Mode.
#     ObjectName = "HTTP Service Request Queues"
#     Instances = ["*"]
#     Counters = ["CurrentQueueSize","RejectedRequests"]
#     Measurement = "win_http_queues"

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        # IIS, ASP.NET Applications
        ObjectName = "ASP.NET Applications"
        Counters = [
                    "Anonymous Requests",
                    "Anonymous Requests/Sec",
                    "Cache Total Entries",
                    "Cache Total Hits",
                    "Cache Total Misses",
                    "Cache Total Hit Ratio",
                    "Cache Total Turnover Rate",
                    "Cache API Entries",
                    "Cache API Hits",
                    "Cache API Misses",
                    "Cache API Hit Ratio",
                    "Cache API Turnover Rate",
                    "Debugging Requests",
                    "Errors During Preprocessing",
                    "Errors During Compilation",
                    "Errors During Execution",
                    "Errors Unhandled During Execution",
                    "Errors Unhandled During Execution/Sec",
                    "Errors Total",
                    "Errors Total/Sec",
                    "Output Cache Entries",
                    "Output Cache Hits",
                    "Output Cache Hit Ratio",
                    "Output Cache Misses",
                    "Output Cache Turnover Rate",
                    "Compilations Total",
                    "Pipeline Instance Count",
                    "Requests Executing",
                    "Requests in Application Queue",
                    "Requests/Sec",
                    "Request Bytes In Total",
                    "Request Bytes Out Total",
                    "Requests Failed",
                    "Requests Not Found",
                    "Requests Not Authorized",
                    "Requests Succeeded",
                    "Requests Timed Out",
                    "Requests Total",
                    "Sessions Active",
                    "Sessions Abandoned",
                    "Sessions Timed Out",
                    "Sessions Total"
                ]
        Instances = ["*"]
        Measurement = "win_aspnet_app"

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        # IIS, ASP.NET
        ObjectName = "ASP.NET"
        Counters = [
                    "Application Restarts",
                    "Application Running",
                    "Request Wait Time",
                    "Requests Disconnected",
                    "Requests Current",
                    "Requests Queued",
                    "Requests Rejected",
                    "Worker Process Restarts",
                    "Worker Process Running"
                ]
        Instances = ["*"]
        Measurement = "win_aspnet"

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        # IIS, Web Service
        ObjectName = "Web Service"
        Counters = [
                    "Service Uptime", "Current Connections", "Bytes Sent/sec", "Total Bytes Sent",
                    "Bytes Received/sec", "Total Bytes Received", "Bytes Total/sec", "Total Bytes Transferred",
                    "Get Requests/sec","Total Get Requests", "Post Requests/sec","Total Post Requests",
                    "Put Requests/sec","Total Put Requests", "Delete Requests/sec","Total Delete Requests",
                    "Anonymous Users/sec", "NonAnonymous Users/sec", "Files Sent/sec", "Total Files Sent",
                    "Files Received/sec", "Total Files Received", "Files/sec", "Total Files Transferred",
                    "Not Found Errors/sec", "Locked Errors/sec", "Total Method Requests/sec"
                ]
        Instances = ["*"]
        Measurement = "win_websvc"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # Web Service Cache / IIS
#         ObjectName = "Web Service Cache"
#         Counters = [
#                     "Current Files Cached", "Active Flushed Entries", "Total Files Cached", "Total Flushed Files",
#                     "File Cache Hits", "File Cache Misses", "File Cache Hits %", "File Cache Flushes",
#                     "Current File Cache Memory Usage", "Maximum File Cache Memory Usage", "Current URIs Cached",
#                     "Total URIs Cached", "Total Flushed URIs", "URI Cache Hits", "URI Cache Misses", "URI Cache Hits %",
#                     "URI Cache Flushes", "Current Metadata Cached", "Total Metadata Cached", "Total Flushed Metadata",
#                     "Metadata Cache Hits", "Metadata Cache Misses", "Metadata Cache Hits %", "Metadata Cache Flushes",
#                     "Kernel: Current URIs Cached", "Kernel: Total URIs Cached", "Kernel: Total Flushed URIs",
#                     "Kernel: URI Cache Hits", "Kernel: Uri Cache Hits/sec", "Kernel: URI Cache Misses", "Kernel: URI Cache Hits %",
#                     "Kernel: URI Cache Flushes"
#                 ]
#         Instances = ["*"]
#         Measurement = "win_websvc_cache"

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        # Process metrics, in this case for IIS only
        ObjectName = "Process"
        Counters = [
                    "% Processor Time",
                    "Handle Count",
                    "Private Bytes",
                    "Thread Count",
                    "Virtual Bytes",
                    "Working Set"
                ]
        Instances = ["System","w3wp","telegraf","fluent-bit"]
        Measurement = "win_proc"


# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # .NET CLR Exceptions, in this case for IIS only
#         ObjectName = ".NET CLR Exceptions"
#         Counters = ["# of Exceps Thrown / sec"]
#         Instances = ["w3wp"]
#         Measurement = "win_dotnet_exceptions"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # .NET CLR Jit, in this case for IIS only
#         ObjectName = ".NET CLR Jit"
#         Counters = ["% Time in Jit","IL Bytes Jitted / sec"]
#         Instances = ["w3wp"]
#         Measurement = "win_dotnet_jit"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # .NET CLR Loading, in this case for IIS only
#         ObjectName = ".NET CLR Loading"
#         Counters = ["% Time Loading"]
#         Instances = ["w3wp"]
#         Measurement = "win_dotnet_loading"

[[inputs.win_perf_counters]]
    [[inputs.win_perf_counters.object]]
        # .NET CLR LocksAndThreads, in this case for IIS only
        ObjectName = ".NET CLR LocksAndThreads"
        Counters = [
                    "# of current logical Threads",
                    "# of current physical Threads",
                    "# of current recognized threads",
                    "# of total recognized threads",
                    "Queue Length / sec",
                    "Total # of Contentions",
                    "Current Queue Length"
                ]
        Instances = ["w3wp"]
        Measurement = "win_dotnet_locks"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # .NET CLR Memory, in this case for IIS only
#         ObjectName = ".NET CLR Memory"
#         Counters = [
#                     "% Time in GC",
#                     "# Bytes in all Heaps",
#                     "# Gen 0 Collections",
#                     "# Gen 1 Collections",
#                     "# Gen 2 Collections",
#                     "# Induced GC",
#                     "Allocated Bytes/sec",
#                     "Finalization Survivors",
#                     "Gen 0 heap size",
#                     "Gen 1 heap size",
#                     "Gen 2 heap size",
#                     "Large Object Heap size",
#                     "# of Pinned Objects"
#                 ]    
#         Instances = ["w3wp"]
#         Measurement = "win_dotnet_mem"

# [[inputs.win_perf_counters]]
#     [[inputs.win_perf_counters.object]]
#         # .NET CLR Security, in this case for IIS only
#         ObjectName = ".NET CLR Security"
#         Counters = [
#                     "% Time in RT checks",
#                     "Stack Walk Depth",
#                     "Total Runtime Checks"
#                 ]
#         Instances = ["w3wp"]
#         Measurement = "win_dotnet_security"

# # Input plugin to report Windows services info.
# [[inputs.win_services]]
#     ## Names of the services to monitor. Leave empty to monitor all the available services on the host. Globs accepted.
#     service_names = [
#                     "LanmanServer",
#                     "TermService",
#                     "Win*"
#                 ]
#     #excluded_service_names = [] # optional, list of service names to exclude
